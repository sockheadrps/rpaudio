rpaudio
=======

.. py:module:: rpaudio




Module Contents
---------------

.. py:class:: AudioChannel(channel_id, channel_callback)

   Bases: :py:obj:`Protocol`


   Manages a queue of AudioSink objects and handles playback.

   :param channel_id: A unique identifier for the audio channel.
   :type channel_id: Union[int, str]
   :param channel_callback: (optional) A callback invoked when the queue is idle.
   :type channel_callback: Optional[Callable[[], None]]


   .. py:method:: control_loop()
      :async:


      Continuously monitors the queue and handles playback,
      auto-consume, and callback execution.



   .. py:method:: drop_current_audio()

      Drops the current audio from the queue.



   .. py:method:: push(audio)

      Adds an AudioSink to the channel queue.

      :param audio: The audio object to add to the queue.
      :type audio: AudioSink



   .. py:property:: auto_consume
      :type: bool

      Returns whether the channel automatically consumes the queue.

      :rtype: bool


   .. py:property:: current_audio
      :type: AudioSink

      Returns the currently playing AudioSink object.

      :rtype: AudioSink


.. py:class:: AudioSink(callback = None)

   Bases: :py:obj:`Protocol`


   Interface that wraps functionality for audio files.

   This class provides methods to load, play, pause, and stop audio playback.
   An optional callback function can be invoked when the audio stops playing.

   Example:

   .. code-block:: python

       handler = AudioHandler(callback=my_callback)
       handler.load_audio("my_audio_file.mp3")
       handler.play()
       handler.pause()
       handler.stop()

   :param callback: A function that will be called when the audio stops playing.
   :type callback: :py:class:`Optional[Callable[[], None]]`

   :ivar is_playing: Flag indicating whether the audio is currently playing.

   :vartype is_playing: :py:class:`bool`


   .. py:method:: load_audio(filename)

      Load an audio file for playback.

      :param filename: The path to the audio file to load.
      :type filename: :py:class:`str`

      :returns: This method does not return any value.
      :rtype: None

      Example:

      .. code-block:: python

          handler = AudioHandler(callback=my_callback)
          handler.load_audio("my_audio_file.mp3")



   .. py:method:: pause()

      Pause the currently playing audio, if any.

      :raises RuntimeError: If no audio has been loaded.

      Example:

      .. code-block:: python

          handler = AudioHandler(callback=my_callback)
          handler.load_audio("my_audio_file.mp3")
          handler.play()
          handler.pause()



   .. py:method:: play()

      Start playing the loaded audio.

      This method begins playback of the audio that was loaded using the `load_audio` method.
      If the audio is already playing, this method has no effect.

      :raises RuntimeError: If no audio has been loaded.

      Example:

      .. code-block:: python

          handler = AudioHandler(callback=my_callback)
          handler.load_audio("my_audio_file.mp3")
          handler.play()



   .. py:method:: stop()

      Stop the currently playing audio, if any.

      :raises RuntimeError: If no audio has been loaded.

      Example:

      .. code-block:: python

          handler = AudioHandler(callback=my_callback)
          handler.load_audio("my_audio_file.mp3")
          handler.play()
          handler.stop()



   .. py:property:: get_effects
      :type: dict[str, any]

      Get current effect settings.
      rtype: dict[str, any]


   .. py:property:: is_playing
      :type: bool

      Flag indicating whether the audio is currently playing.

      :returns: True if the audio is playing, False otherwise.
      :rtype: bool

      Example:

      .. code-block:: python

          handler = AudioHandler(callback=my_callback)
          handler.load_audio("my_audio_file.mp3")
          handler.play()
          print(handler.is_playing)  # True if audio is playing


   .. py:property:: metadata
      :type: Dict[str, str]

      Get metadata for the audio file.

      :return: A dictionary containing metadata for the audio file.
      :rtype: dict[str, any]


.. py:class:: ChannelManager

   Bases: :py:obj:`Protocol`


   Manages multiple audio channels and provides an API to control them.

   :ivar channels: A dictionary mapping channel identifiers to their corresponding AudioChannel instances.
   :vartype channels: dict


   .. py:method:: add_channel(name, channel)

      Adds a new audio channel to the manager.

      :param name: The unique identifier for the channel.
      :type name: str
      :param channel: The audio channel to add.
      :type channel: AudioChannel



   .. py:method:: channel(name)

      Retrieves a channel by its identifier.

      :param name: The unique identifier of the channel.
      :type name: str
      :return: The corresponding AudioChannel instance, or None if not found.
      :rtype: Optional[AudioChannel]



   .. py:method:: drop_channel(name)

      Drops an audio channel from the manager.

      :param name: The unique identifier of the channel to drop.
      :type name: str
      :raises RuntimeError: If the channel is not found.



   .. py:method:: start_all()

      Starts auto-consuming audio on all channels.



   .. py:method:: stop_all()

      Stops auto-consuming audio on all channels.



   .. py:attribute:: channels
      :type:  dict[str, AudioChannel]


.. py:class:: MetaData(audio_sink)

   A class representing metadata for an audio file.


   .. py:property:: album_artist
      :type: Optional[str]

      Get the album artist of the audio file.

      :return: The album artist of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: album_title
      :type: Optional[str]

      Get the album title of the audio file.

      :return: The album title of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: artist
      :type: Optional[str]

      Get the artist of the audio file.

      :return: The artist of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: channels
      :type: Optional[str]

      Get the number of channels in the audio file.

      :return: The number of channels, or None if not available.
      :rtype: Optional[str]


   .. py:property:: comment
      :type: Optional[str]

      Get the comment associated with the audio file.

      :return: The comment of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: composer
      :type: Optional[str]

      Get the composer of the audio file.

      :return: The composer of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: date
      :type: Optional[str]

      Get the date associated with the audio file.

      :return: The date of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: disc_number
      :type: Optional[str]

      Get the disc number of the audio file.

      :return: The disc number, or None if not available.
      :rtype: Optional[str]


   .. py:property:: duration
      :type: Optional[float]

      Get the duration of the audio file in seconds.

      :return: The duration of the audio file, or None if not available.
      :rtype: Optional[float]


   .. py:property:: genre
      :type: Optional[str]

      Get the genre of the audio file.

      :return: The genre of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: sample_rate
      :type: Optional[int]

      Get the sample rate of the audio file.

      :return: The sample rate of the audio file, or None if not available.
      :rtype: Optional[int]


   .. py:property:: title
      :type: Optional[str]

      Get the title of the audio file.

      :return: The title of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: total_discs
      :type: Optional[str]

      Get the total number of discs in the album.

      :return: The total number of discs, or None if not available.
      :rtype: Optional[str]


   .. py:property:: total_tracks
      :type: Optional[str]

      Get the total number of tracks in the album.

      :return: The total number of tracks, or None if not available.
      :rtype: Optional[str]


   .. py:property:: track_number
      :type: Optional[str]

      Get the track number of the audio file.

      :return: The track number of the audio file, or None if not available.
      :rtype: Optional[str]


   .. py:property:: year
      :type: Optional[str]

      Get the year the audio file was released.

      :return: The year of the audio file, or None if not available.
      :rtype: Optional[str]


