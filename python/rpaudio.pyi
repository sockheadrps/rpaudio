# This file is automatically generated by pyo3_stub_gen
# ruff: noqa: E501, F401

import typing

class AudioChannel:
    auto_consume: bool
    current_audio: typing.Optional[AudioSink]
    queue_contents: list[AudioSink]
    is_playing: bool
    effects: list
    def __new__(cls,): ...
    def push(self, sink:AudioSink) -> None:
        ...

    def set_auto_consume(self, value:bool) -> None:
        ...

    def drop_current_audio(self) -> None:
        ...

    def set_effects_chain(self, effect_list:list) -> None:
        ...

    def current_audio_data(self) -> typing.Any:
        ...


class AudioSink:
    metadata: typing.Any
    metadata_dict: typing.Any
    is_playing: bool
    callback: typing.Optional[typing.Any]
    def __new__(cls,callback = ...): ...
    def load_audio(self, file_path:str) -> AudioSink:
        ...

    def play(self) -> None:
        ...

    def pause(self) -> None:
        ...

    def stop(self) -> None:
        ...

    def get_volume(self) -> float:
        ...

    def set_volume(self, volume:float) -> None:
        ...

    def get_pos(self) -> float:
        ...

    def set_duration(self, duration:float) -> None:
        ...

    def get_remaining_time(self) -> float:
        ...

    def get_speed(self) -> float:
        ...

    def set_speed(self, speed:float) -> None:
        ...

    def try_seek(self, position:float) -> None:
        ...

    def cancel_callback(self) -> None:
        ...

    def empty(self) -> bool:
        ...

    def apply_effects(self, effect_list:list) -> None:
        ...

    def playback_data(self) -> typing.Any:
        ...


class ChannelManager:
    def new(self) -> ChannelManager:
        ...

    def add_channel(self, name:str, channel:AudioChannel) -> None:
        ...

    def drop_channel(self, name:str) -> None:
        ...

    def channel(self, name:str) -> typing.Optional[AudioChannel]:
        ...

    def start_all(self) -> None:
        ...

    def stop_all(self) -> None:
        ...


