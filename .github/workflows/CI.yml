name: PyPI Release

on:
  push:
  pull_request:

jobs:
  macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: x64
      - uses: dtolnay/rust-toolchain@stable
      - name: Install gettext
        run: |
          brew install gettext
          brew link gettext --force
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist
      - name: Install built wheel - x86_64
        run: |
          pip install rpaudio --no-index --find-links dist/ --force-reinstall
          python -c "import rpaudio"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1
        with:
          target: universal2-apple-darwin
          args: --release --out dist
      - name: Install built wheel - universal2
        run: |
          pip install rpaudio --no-index --find-links dist/ --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist
      - name: Install built wheel
        run: |
          pip install rpaudio --no-index --find-links dist/ --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
          before-script-linux: |
            yum install -y alsa-lib-devel pkgconfig
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install rpaudio --no-index --find-links dist/ --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist


  # linux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [aarch64, armv7, s390x, ppc64le, ppc64]
  #   steps:
  #     - uses: actions/checkout@v4

  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9

  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: auto
  #         args: --release --out dist -m Cargo.toml

  #     - name: Install and Test Wheels
  #       uses: uraimo/run-on-arch-action@v2.7.2
  #       if: matrix.target != 'ppc64'
  #       with:
  #         before-script-linux: |
  #           apt-get update
  #           apt-get install -y --no-install-recommends python3 python3-pip pkg-config libssl-dev libasound2-dev librust-alsa-sys-dev
  #           # Install the cross-compiling wrapper for pkg-config
  #           apt-get install -y crossbuild-essential-${{ matrix.target }}
  #           # Optionally: Add a custom cross-compiling wrapper script
  #           echo '#!/bin/sh\npkg-config --cross $@' > /usr/local/bin/pkg-config-cross
  #           chmod +x /usr/local/bin/pkg-config-cross
  #           export PKG_CONFIG=/usr/local/bin/pkg-config-cross
  #           pip3 install -U pip
  #         arch: ${{ matrix.target }}
  #         distro: ubuntu20.04
  #         githubToken: ${{ github.token }}
  #         run: |
  #           pip3 install rpaudio --no-index --find-links dist/ --force-reinstall
  #           python3 -c "import rpaudio"

  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist


  # musllinux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-musl
  #         - i686-unknown-linux-musl
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #         architecture: x64
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: musllinux_1_2
  #         args: --release --out dist -m Cargo.toml
  #         # before-script-linux: |
  #         #   apk add py3-pip pkg-config alsa-lib
  #     - name: Install built wheel
  #       if: matrix.target == 'x86_64-unknown-linux-musl'
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           apk add py3-pip pkg-config alsa-lib
  #           pip3 install -U pip
  #           pip3 install rpaudio --no-index --find-links /io/dist/ --force-reinstall
  #           python3 -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # musllinux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       platform:
  #         - target: aarch64-unknown-linux-musl
  #           arch: aarch64
  #         - target: armv7-unknown-linux-musleabihf
  #           arch: armv7
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         manylinux: musllinux_1_2
  #         args: --release --out dist -m Cargo.toml
  #         # before-script-linux: |
  #         #   yum install pkg-config
  #     - uses: uraimo/run-on-arch-action@v2.7.2
  #       name: Install built wheel
  #       with:
  #         arch: ${{ matrix.platform.arch }}
  #         distro: alpine_latest
  #         install: |
  #           apk add pkg-config py3-pip alsa-lib
  #           pip3 install -U pip
  #         run: |
  #           pip3 install rpaudio --no-index --find-links dist/ --force-reinstall
  #           python3 -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # check-commit-message:
  #   # needs: [ macos, windows, linux, linux-cross, musllinux, musllinux-cross ]
  #   needs: [ macos, windows, linux]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download check result
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: commit-message-check

  #     - name: Check commit message
  #       id: check-message
  #       run: |
  #         if [[ -f $GITHUB_ENV && -n "$(grep 'should-release=true' $GITHUB_ENV)" ]]; then
  #           echo "Should release"
  #           echo "should-release=true" >> $GITHUB_ENV
  #         else
  #           echo "Should not release"
  #           echo "should-release=false" >> $GITHUB_ENV
  #         fi

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [ macos, windows, linux ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/download-artifact@v3
        with:
          name: wheels

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
  
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing dist/*