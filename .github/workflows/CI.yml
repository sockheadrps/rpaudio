name: Python

on:
  push:
  pull_request:

jobs:
  macos:
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
        with:
          repository: sockheadrps/rpaudio
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9

      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: x86_64
          args: --release --out dist --sdist -m Cargo.toml
      - name: Install built wheel - x86_64
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: universal2-apple-darwin
          args: --release --out dist -m Cargo.toml
      - name: Install built wheel - universal2
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v4
        with:
          repository: sockheadrps/rpaudio
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -m Cargo.toml
      - name: Install built wheel
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # linux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [x86_64, i686]
  #   steps:
  #     - name: Install ALSA development libraries
  #       run: sudo apt-get update && sudo apt-get install -y pkg-config build-essential libasound2-dev


  #     - name: Set PKG_CONFIG_PATH
  #       run: |
  #         find /usr -name alsa.pc
  #         echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: sockheadrps/rpaudio
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: auto
  #         args: --release --out dist -m Cargo.toml --features "alsa-backend" 

  #     - name: Install built wheel
  #       if: matrix.target == 'x86_64'
  #       run: |
  #         pip install rpaudio --no-index --find-links dist --force-reinstall
  #         python -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # linux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target: [aarch64, armv7, s390x, ppc64le, ppc64]
  #   steps:
  #     - name: Install ALSA development libraries
  #       run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

  #     - name: Set PKG_CONFIG_PATH
  #       run: echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/arm-linux-gnueabihf/pkgconfig" >> $GITHUB_ENV

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: sockheadrps/rpaudio
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: auto
  #         args: --release --out dist -m Cargo.toml
  #     - uses: uraimo/run-on-arch-action@v2.7.2
  #       if: matrix.target != 'ppc64'
  #       name: Install built wheel
  #       with:
  #         arch: ${{ matrix.target }}
  #         distro: ubuntu20.04
  #         githubToken: ${{ github.token }}
  #         install: |
  #           apt-get update
  #           apt-get install -y --no-install-recommends python3 python3-pip
  #           pip3 install -U pip
  #         run: |
  #           pip3 install rpaudio --no-index --find-links dist/ --force-reinstall
  #           python3 -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # musllinux:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       target:
  #         - x86_64-unknown-linux-musl
  #         - i686-unknown-linux-musl
  #   steps:
  #     - name: Install ALSA development libraries
  #       run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

  #     - name: Set PKG_CONFIG_PATH
  #       run: echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig" >> $GITHUB_ENV

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: sockheadrps/rpaudio
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: ${{ matrix.target }}
  #         manylinux: musllinux_1_2
  #         args: --release --out dist -m Cargo.toml
  #     - name: Install built wheel
  #       if: matrix.target == 'x86_64-unknown-linux-musl'
  #       uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           apk add py3-pip
  #           pip3 install -U pip
  #           pip3 install rpaudio --no-index --find-links /io/dist/ --force-reinstall
  #           python3 -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist

  # musllinux-cross:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       platform:
  #         - target: aarch64-unknown-linux-musl
  #           arch: aarch64
  #         - target: armv7-unknown-linux-musleabihf
  #           arch: armv7
  #   steps:
  #     - name: Install ALSA development libraries
  #       run: sudo apt-get update && sudo apt-get install -y libasound2-dev pkg-config

  #     - name: Set PKG_CONFIG_PATH
  #       run: echo "PKG_CONFIG_PATH=/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/lib/arm-linux-gnueabihf/pkgconfig" >> $GITHUB_ENV

  #     - uses: actions/checkout@v4
  #       with:
  #         repository: sockheadrps/rpaudio
  #         token: ${{ secrets.GITHUB_TOKEN }}
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: ${{ matrix.platform.target }}
  #         manylinux: musllinux_1_2
  #         args: --release --out dist -m Cargo.toml
  #     - uses: addnab/docker-run-action@v3
  #       with:
  #         image: alpine:latest
  #         options: -v ${{ github.workspace }}:/io -w /io
  #         run: |
  #           apk add py3-pip
  #           pip3 install -U pip
  #           pip3 install rpaudio --no-index --find-links /io/dist/ --force-reinstall
  #           python3 -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: wheels
  #         path: dist
  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    # needs: [ macos, windows, linux, linux-cross, musllinux, musllinux-cross ]
    needs: [ macos, windows ]
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *