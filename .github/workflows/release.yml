name: Release to PyPI

on:
  push:
    branches:
      - main
      - experimental
    tags:
      - 'v*'

jobs:
  test:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.8

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install system dependencies
        run: |
          choco install portaudio
          choco install alsa-lib

      - name: Set up virtual environment
        run: |
          if (Test-Path .venv) { Remove-Item -Recurse -Force .venv }
          python -m venv .venv
          .venv\Scripts\activate
          python -m pip install --upgrade pip
          pip install maturin

      - name: Install Python dependencies
        run: |
          .venv\Scripts\activate
          pip install .[test]

      - name: Build and install package in develop mode
        run: |
          .venv\Scripts\activate
          maturin develop

      - name: Run tests
        run: |
          .venv\Scripts\activate
          pytest -v

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x64, x86]
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: ${{ matrix.target }}
      - uses: dtolnay/rust-toolchain@stable
      - name: Build wheels
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -m Cargo.toml
      - name: Install built wheel
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist
          before-script-linux: |
            yum install -y alsa-lib-devel pkgconfig
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  macos:
    runs-on: macos-13
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Build wheels - x86_64
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: x86_64
          args: --release --out dist --sdist -m Cargo.toml
      - name: Install built wheel - x86_64
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Build wheels - universal2
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: universal2-apple-darwin
          args: --release --out dist -m Cargo.toml
      - name: Install built wheel - universal2
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist
  
  release:
    runs-on: ubuntu-latest
    needs: 
      - linux
      - windows
      - macos
    
    steps:
      - name: Download all wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      
      - uses: actions/checkout@v4
      - name: Determine TWINE_PASSWORD
        run: |
          chmod +x .github/workflows/scripts/set-twine-secret.sh
          .github/workflows/scripts/set-twine-secret.sh

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
