name: Release to PyPI

on:
  push:
    branches:
      - main
      - experimental
    tags:
      - 'v*'

jobs:
  check-output-date:
    name: Check pytest output date
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check output date
        run: |
          last_line=$(tail -n 4 pytest_output.txt | head -n 1)

          pytest_date=$(echo "$last_line" | grep -oP "\d{4}-\d{2}-\d{2}")
          pytest_time=$(echo "$last_line" | grep -oP "\d{2}:\d{2}:\d{2}")

          today=$(date +%Y-%m-%d)
          now=$(date +%s)

          pytest_timestamp=$(date -d "$pytest_date $pytest_time" +%s 2>/dev/null)
          if [ $? -ne 0 ]; then
            echo "Error: Invalid date or time format"
            exit 1
          fi
          one_hour_ago=$(($now - 3600))

          if [ "$pytest_date" != "$today" ] || [ "$pytest_timestamp" -gt "$one_hour_ago" ]; then
            echo "Pytest output is outdated or not from today. Please run the tests again."
            exit 1
          fi

      - name: Success message
        if: success()
        run: echo "Pytest output is recent and valid."

  # windows:
  #   runs-on: windows-latest
  #   strategy:
  #     matrix:
  #       target: [x64, x86]
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8
  #         architecture: ${{ matrix.target }}
  #     - uses: dtolnay/rust-toolchain@stable
  #     - name: Build wheels
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: ${{ matrix.target }}
  #         args: --release --out dist -m Cargo.toml
  #     - name: Install built wheel
  #       run: |
  #         pip install rpaudio --no-index --find-links dist --force-reinstall
  #         python -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
            # name: windows-${{ matrix.target }}
  #         path: dist/

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target: [x86_64, i686]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: 3.9
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1.44.0
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out dist/
          before-script-linux: |
            yum install -y alsa-lib-devel pkgconfig
      - name: Install built wheel
        if: matrix.target == 'x86_64'
        run: |
          pip install rpaudio --no-index --find-links dist --force-reinstall
          python -c "import rpaudio"
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.target }}
          path: dist/

  # macos:
  #   runs-on: macos-13
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.8

  #     - name: Build wheels - x86_64
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: x86_64
  #         args: --release --out dist --sdist -m Cargo.toml
  #     - name: Install built wheel - x86_64
  #       run: |
  #         pip install rpaudio --no-index --find-links dist --force-reinstall
  #         python -c "import rpaudio"
  #     - name: Build wheels - universal2
  #       uses: PyO3/maturin-action@v1.44.0
  #       with:
  #         target: universal2-apple-darwin
  #         args: --release --out dist -m Cargo.toml
  #     - name: Install built wheel - universal2
  #       run: |
  #         pip install rpaudio --no-index --find-links dist --force-reinstall
  #         python -c "import rpaudio"
  #     - name: Upload wheels
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: mac-${{ matrix.target }}
  #         path: dist/
  
  release:
    runs-on: ubuntu-latest
    needs: 
      - linux
      # - windows
      # - macos
    
    steps:
      - name: Display files
        run: ls -a
      - name: Download all wheels
        uses: actions/download-artifact@v4
        with:
          path: dist/
      - name: Display structure of downloaded files
        run: | 
          ls -R dist/ 
          ls -a

      - uses: actions/setup-python@v4
        with:
          python-version: 3.8
      
      - uses: actions/checkout@v4
      - name: Determine TWINE_PASSWORD
        run: |
          chmod +x .github/workflows/scripts/set-twine-secret.sh
          .github/workflows/scripts/set-twine-secret.sh

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
